<?PHP// This file is part of Assessment module for Moodle - http://moodle.org///// Moodle is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// (at your option) any later version.//// Moodle is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License// along with Moodle.  If not, see <http://www.gnu.org/licenses/>./** * Class for modifying, creating, deleting and viewing rubric instanaces * * @package     mod * @subpackage  assessment * @author      Andy Chan, CITE, HKU <ctchan.andy@gmail.com> * @copyright   2012 Andy Chan <ctchan.andy@gmail.com> * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later */class rubric {    // db attributes    var $id;    var $name;    var $description;    var $creatorid;    var $courseid;    var $points;    var $rowcoldefine;    var $timemodified;        // db row specs    var $rowspecs;    var $rowspec_count;    var $rowspec_map;        // db row specs    var $colspecs;    var $colspec_count;    var $colspec_point_map;    var $colspec_map;        // db specs    var $specs;    var $spec_count;    var $spec_map;        var $allspecid;    // db modifications    var $is_new;    var $_orig_id;    var $_orig_name;    var $_orig_description;    var $_orig_creatorid;    var $_orig_courseid;    var $_orig_points;    var $_orig_timemodified;        var $rowspecs_loaded;    var $rowspecs_in_sync;        var $colspecs_loaded;    var $colspecs_in_sync;        var $specs_loaded;    var $specs_in_sync;    // environmental vars    var $cm;    var $context;    var $course;    var $list;    //var $items;    var $uses;    var $maxbytes;        // specific to user/assignment    var $userid;    var $assessment;    var $peerassessment;    var $is_graded;        /**     * Pass rubric id - called by /mod/assessment/lib.php     */    function rubric($id=NULL, $assessment=NULL, $course=NULL){        global $DB;        $this->maxbytes = 102400; // 100 KB        if(!empty($id)){                        if(! $rubric = $DB->get_record('assessment_rubrics', array('id'=>$id))){                print_error('cannotgetrubricrecord', 'assessment');            }            $this->_orig_id = $this->id = $rubric->id;            $this->_orig_name = $this->name = $rubric->name;            $this->_orig_description = $this->description = $rubric->description;            $this->_orig_creatorid = $this->creatorid = $rubric->creatorid;            $this->_orig_courseid = $this->courseid = $rubric->courseid;            $this->_orig_points = $this->points = $rubric->points;            $this->_orig_rowcoldefine = $this->rowcoldefine = $rubric->rowcoldefine;            $this->_orig_timemodified = $this->timemodified = $rubric->timemodified;            $this->list = null;            $this->assessment = $assessment;                        if (isset($assessment->peer)) {                if (!$this->peerassessment = $DB->get_record('assessment_types', array('id'=>$assessment->peer))) {                    print_error('errornopeerassessment', 'assessment');                }            }                        $this->rowspecs = array();            $this->rowspec_count = 0;            $this->rowspecs_loaded = false;            $this->rowspec_map = array();                        $this->colspecs = array();            $this->colspec_count = 0;            $this->colspecs_loaded = false;            $this->colspec_point_map = array();            $this->colspec_map = array();            $this->specs = array();            $this->spec_count = 0;            $this->specs_loaded = false; // if we add a spec, lets load what we have first            $this->spec_map = array();                        $this->allspecid = '';                        $this->in_sync = true;            $this->specs_in_sync = true;            $this->rowspecs_in_sync = true;            $this->colspecs_in_sync = true;                        $this->is_new = false;                        if(is_object($course)){                if($course->id != $this->courseid){                    print_error('cidmismatchrid', 'assessment');                }                $this->course = $course;            } else {                if (! $this->course = $DB->get_record("course", array("id"=>$this->courseid))) {                    print_error('coursemisconf', 'assessment');                }            }                    } else {            if(is_object($course)){                $this->course = $course;                $this->courseid = $course->id;            } else {                global $COURSE;                if(is_object($COURSE) && isset($COURSE->id))                     $this->courseid = $COURSE->id;                else                    error('Unable to instantiate Course');                if (! $this->course = $DB->get_record("course", array("id"=>$this->courseid))) {                    print_error('coursemisconf', 'assessment');                }            }                        $this->id = 0;                        global $USER;                        $this->name = '';            $this->description = '';            if(is_object($USER) && isset($USER->id))               $this->creatorid = $USER->id;            $this->points = 0;            $this->rowcoldefine = 1;            $this->timemodified = time();                        $this->rowspecs = array();            $this->rowspec_count = 0;            $this->rowspecs_loaded = true;            $this->rowspec_map = array();                        $this->colspecs = array();            $this->colspec_count = 0;            $this->colspecs_loaded = true;            $this->colspec_point_map = array();            $this->colspec_map = array();                        $this->specs = array();            $this->spec_count = 0;            $this->specs_loaded = true; // nothing to load                        $this->allspecid = '';                        $this->in_sync = false;            $this->specs_in_sync = true;            $this->rowspecs_in_sync = true;            $this->colspecs_in_sync = true;            $this->is_new = true;        }                $this->context = get_context_instance(CONTEXT_COURSE, $this->course->id);    }    function in_sync() {        if ($this->is_new) {            $this->in_sync = false;        } else {            $this->in_sync = ( ($this->_orig_id === $this->id) &&                               ($this->_orig_name == $this->name) &&                               ($this->_orig_description == $this->description) &&                               ($this->_orig_creatorid == $this->creatorid) &&                               ($this->_orig_courseid == $this->courseid) &&                               ($this->_orig_points == $this->points) &&                               ($this->_orig_rowcoldefine == $this->rowcoldefine) &&                               ($this->_orig_timemodified == $this->timemodified) );        }        return $this->in_sync;    }        function format_rubric_description($desc) {        $desc = nl2br($desc);                // Match [ ] and change to highlight        $matches = array();        preg_match_all('/\[.*?\]/', $desc, $matches);        if (sizeof($matches[0]) >= 1) {            foreach ($matches[0] as $part) {                $search = array('[', ']');                $replace = array('<span style="background-color:GreenYellow;">', '</span>');                $newpart = str_replace($search, $replace, $part);                $desc = str_replace($part, $newpart, $desc);            }        }                // Match { } and change to bold        $matches = array();        preg_match_all('/\{.*?\}/', $desc, $matches);        if (sizeof($matches[0]) >= 1) {            foreach ($matches[0] as $part) {                $search = array('{', '}');                $replace = array('<strong>', '</strong>');                $newpart = str_replace($search, $replace, $part);                $desc = str_replace($part, $newpart, $desc);            }        }                return $desc;    }        // prints out standard view of the rubric (adds grade/feedback if available)    function view($userid=null) {        global $CFG, $USER, $OUTPUT, $DB;                if(empty($userid))  $this->userid = $USER->id;        else                $this->userid = $userid;                // If there is a rubric for the assessment, print it        if($this->id){			$formatoptions = new stdClass;            $formatoptions->noclean = true;                        if($rec = $DB->get_record_sql("SELECT name FROM {assessment_rubrics} WHERE id = {$this->id}")){                $this->name = $rec->name;            }else{                print_error('cannotgetrubricrecord', 'assessment', '', $this->id);            }                        if(isset($score) && $score < 0) $score = 0;                        if($this->is_graded){                $total_label = get_string('totalmark', 'assessment').': ';                $total = "$score / {$this->points}";                $percent = round($score / $this->points,3)*100;            }else{                $total_label = get_string('maxmark', 'assessment').': ';                $total = $this->points.' pts';                $percent = '';            }                        $this->get_rowspecs();            $this->get_colspecs();            $this->get_specs();                        if ($this->rowcoldefine == 1) {                $rubrictable = '<table id="rubric" border="1" align="center">';                                for ($i=0; $i<$this->rowspec_count+1; $i++) {                    $trclass = ($i%2==0) ? 'nocolor' : 'colored';                    $rubrictable .= '<tr class='.$trclass.'>';                    for ($j=0; $j<$this->colspec_count+1; $j++) {                        // first row defining level name and weight                         if ($i == 0) {                            if ($j != 0) {                                $colspecid = $this->colspec_map[$j];                                $levelname = $this->colspecs[$colspecid]['name'];                                $points = $this->colspecs[$colspecid]['points'];                                $maxpoints = $this->colspecs[$colspecid]['maxpoints'];                                                                $rubrictable .= '<th>'.$levelname;                                $rubrictable .= '<br />';                                if (is_numeric($maxpoints) && $maxpoints != 0) {                                   $rubrictable .= $points.' - '.$maxpoints.' pts</th>';                                } else {                                   $rubrictable .= $points.' pts</th>';                                }                            } else {                                $rubrictable .= '<td>&nbsp;</td>';                            }                        } else {                            $rowspecid = $this->rowspec_map[$i];                            $custompoint = $this->rowspecs[$rowspecid]['custompoint'];                            // first column defining criteria name                            if ($j == 0) {                                $criname = $this->rowspecs[$rowspecid]['name'];                                $rubrictable .= '<th>'.$criname.'</th>';                            } else {                                $colspecid = $this->colspec_map[$j];                                $specid = $this->spec_map[$rowspecid][$colspecid];                                $description = $this->specs[$specid]['description'];                                // Disabled level                                if (strtoupper($description) == 'NA') {                                    $description = get_string('notused', 'assessment');                                }                                $rubrictable .= '<td>';                                if ($custompoint == 1) {                                   $custpoints = $this->specs[$specid]['points'];                                   $custmaxpoints = $this->specs[$specid]['maxpoints'];                                   $rubrictable .= '<div class="custom_point_div">';                                   if (is_numeric($custmaxpoints) && $custmaxpoints != 0) {                                      $rubrictable .= $custpoints.' - '.$custmaxpoints.' pts';                                   } else {                                      $rubrictable .= $custpoints.' pts';                                   }                                   $rubrictable .= '</div>';                                }                                $rubrictable .= $this->format_rubric_description($description);                            }                        }                    }                    $rubrictable .= '</tr>';                }                $rubrictable .= "<tr>                                     <td colspan=\"".$this->colspec_count."\" class=\"line\" align=\"right\">$total_label</td>                                     <td class=\"line\" align=\"center\"><div style=\"white-space:nowrap\">$total</div></td>                                 </tr>";                $rubrictable .= '</table>';                $rubric_th_width = floor(100/($this->colspec_count+1));            } else {                $rubrictable = '<table id="rubric" border="1" align="center">';                for ($j=0; $j<$this->colspec_count+1; $j++) {                    $trclass = ($j%2==0) ? 'nocolor' : 'colored';                    $rubrictable .= '<tr class='.$trclass.'>';                    for ($i=0; $i<$this->rowspec_count+1; $i++) {                        // first row defining criteria name                        if ($j == 0) {                            if ($i != 0) {                                $rowspecid = $this->rowspec_map[$i];                                $criname = $this->rowspecs[$rowspecid]['name'];                                $rubrictable .= '<th>'.$criname;                            } else {                                $rubrictable .= '<td>&nbsp;</td>';                            }                        } else {                            $colspecid = $this->colspec_map[$j];                            // first column defining level name and weight                             if ($i == 0) {                                $levelname = $this->colspecs[$colspecid]['name'];                                $points = $this->colspecs[$colspecid]['points'];                                $maxpoints = $this->colspecs[$colspecid]['maxpoints'];                                $rubrictable .= '<th>'.$levelname;                                $rubrictable .= '<br />';                                if (is_numeric($maxpoints) && $maxpoints != 0) {                                   $rubrictable .= $points.' - '.$maxpoints.' pts</th>';                                } else {                                   $rubrictable .= $points.' pts</th>';                                }                            } else {                                $rowspecid = $this->rowspec_map[$i];                                $specid = $this->spec_map[$rowspecid][$colspecid];                                $description = $this->specs[$specid]['description'];                                // Disabled level                                if (strtoupper($description) == 'NA') {                                    $description = get_string('notused', 'assessment');                                }                                $rubrictable .= '<td>';                                $rubrictable .= $this->format_rubric_description($description);                            }                        }                    }                    $rubrictable .= '</tr>';                }                $rubrictable .= "<tr>                                     <td colspan=\"".$this->colspec_count."\" class=\"line\" align=\"right\">$total_label</td>                                     <td class=\"line\" align=\"center\"><div style=\"white-space:nowrap\">$total</div></td>                                 </tr>";                $rubrictable .= '</table>';                $rubric_th_width = floor(100/($this->rowspec_count+1));            }                        $style = "<style type=\"text/css\">                      #rubric th {                          width:".$rubric_th_width."%;                      }                      </style>";                        print $style;                        echo $OUTPUT->box($rubrictable);        }    }    /**     * Prints out smaller version of 'view()'.     *     * Called by display_submission()     */    function grade($assessment, $assessment_grade, $userid, $type=0, $viewer='teacher', $mode='edit', $marker=0, $submissionid=0, $return=false) {        global $CFG, $DB, $OUTPUT, $PAGE;                // If yet ungraded, then print only rubric        $this->is_graded = !empty($assessment_grade->timemodified);        $this->assessment = $assessment;        $this->userid = $userid;                if(!$rec = $DB->get_record_sql("SELECT name FROM {assessment_rubrics} WHERE id = {$this->id}")){            print_error('cannotgetrubricrecord', 'assessment', '', $this->id);            return;        }                if ($submissionid) {           $this->items = $this->get_spec_data($type, 0, 0, $marker, $submissionid);        } else {           $this->items = $this->get_spec_data($type, ($mode=='edit')?1:(($mode=='teacherview')?2:0), $userid, $marker);        }                if(!$this->items){            $a = new stdClass();            $a->is_graded = $this->is_graded;            $a->aid = $assessment->id;            $a->rid = $this->id;            print_error('invalidgrade', 'assessment', '', $a);            return;        }                if($this->is_graded) {            $item_roworder_map = array();            foreach ($this->items as $specid => $itemobj) {                $item_roworder_map[$itemobj->roworder] = $itemobj->score;            }            $starting_total = $assessment_grade->grade < 0 ? 0 : $assessment_grade->grade;            $starting_total_raw = $assessment_grade->grade;        } else {            $starting_total_raw = $starting_total = $this->points;        }                $percent = round($starting_total / $this->points * 100, 1);                $this->get_rowspecs();        $this->get_colspecs();        $this->get_specs();                $points_arr = array();        $specialmaxpoint = array();        $rubrictable = '<table id="rubric" border="1" cellpadding="4" cellspacing="2" align="center">';        if ($this->rowcoldefine == 1) {            for ($i=0; $i<$this->rowspec_count+1; $i++) {                $points_arr = array();                $trclass = '';                $rubrictable .= '<tr class='.$trclass.'>';                for ($j=0; $j<$this->colspec_count+1; $j++) {                    // Not the first row (level names)                    if ($i != 0) {                        $rowspecid = $this->rowspec_map[$i];                        if ($j !== 0) $custompoint = $this->rowspecs[$rowspecid]['custompoint'];                    }                    // Not the first column (criteria names)                    if ($j != 0) {                        $colspecid = $this->colspec_map[$j];                        if ($i !== 0) {                            $specid = $this->spec_map[$rowspecid][$colspecid];                            if ($custompoint == 1) {                               $points = $this->specs[$specid]['points'];                               $maxpoints = $this->specs[$specid]['maxpoints'];                            }                        }                        $levelname = $this->colspecs[$colspecid]['name'];                        $points = $this->colspecs[$colspecid]['points'];                        $maxpoints = $this->colspecs[$colspecid]['maxpoints'];                        // gather points for making dropdown list in case if no maxpoints                        if (sizeof($points_arr)<$this->colspec_count) $points_arr[] = $points;                    }                    // first row defining level name and weight                     if ($i == 0) {                        if ($j != 0) {                            $rubrictable .= '<th>'.$levelname;                            $rubrictable .= '<br />';                            if (is_numeric($maxpoints) && $maxpoints != 0) {                               $rubrictable .= $points.'-'.$maxpoints.'</th>';                            } else {                               $rubrictable .= $points.' pts</th>';                            }                        } else {                            $rubrictable .= '<td>&nbsp;</td>';                        }                    } else {                        // first column defining criteria name                        if ($j == 0) {                            $criname = $this->rowspecs[$this->rowspec_map[$i]]['name'];                            $rubrictable .= '<th>'.$criname.'</th>';                        } else {                            $description = $this->specs[$specid]['description'];                            // Disabled level                            if (strtoupper($description) == 'NA') {                                $description = get_string('notused', 'assessment');                                if (!isset($specialmaxpoint[$i])) {                                    if ($custompoint == 1) {                                        $specialmaxpoint[$i] = $this->specs[$specid]['points'] - 1;                                    } else {                                        $specialmaxpoint[$i] = $this->colspecs[$colspecid]['points']-1;                                    }                                }                            }                            $tdclass = '';                            $tdid = 'rb_td_'.$rowspecid.'_';                            if ($custompoint == 1) {                               $points = $this->specs[$specid]['points'];                               $maxpoints = $this->specs[$specid]['maxpoints'];                            }                            if (is_numeric($maxpoints) && $maxpoints != 0) {                               $tdid .= $points.'_'.$maxpoints;                            } else {                               $tdid .= $points;                            }                            if ($this->is_graded) {                               if (is_numeric($maxpoints) && $maxpoints != 0) {                                  if ($item_roworder_map[$i] >= $points && $item_roworder_map[$i] <= $maxpoints)                                     $tdclass = 'shadebg';                               } else {                                  if ($item_roworder_map[$i] == $points)                                     $tdclass = 'shadebg';                               }                            } else {                               if ($j == $this->colspec_count)                                  $tdclass = 'shadebg';                            }                                                        $td_onclick = ($mode=='edit') ? 'document.getElementById(\'rubricgrade_'.$this->rowspec_map[$i].'\').selectedIndex='.($j-1).';updateGrade(\'rubricgrade_'.$this->rowspec_map[$i].'\');' : '';                            $td_onmouseover = ($mode=='edit') ? 'this.style.cursor=\'pointer\';' : '';                            $rubrictable .= '<td id="'.$tdid.'" class="'.$tdclass.'" onclick="'.$td_onclick.'" onmouseover="'.$td_onmouseover.'">';                            if ($custompoint == 1) {                               $rubrictable .= '<div class="custom_point_div">';                               if (is_numeric($maxpoints) && $maxpoints != 0) {                                  $rubrictable .= $points.' - '.$maxpoints.' pts';                               } else {                                  $rubrictable .= $points.' pts';                               }                            }                            $rubrictable .= '</div>';                            $rubrictable .= nl2br($description).'</td>';                        }                    }                }                                // The rightest column which contain the drop-down box for selecting grades                // Skip the first row since it is level name                if($i != 0) {                    $id = 'rubricgrade_'.$this->rowspec_map[$i];                    if ($maxpoints == '' || $maxpoints == 0) {                        $maxpoints = $points_arr;                    }                    if (isset($specialmaxpoint[$i])) $maxpoints = $specialmaxpoint[$i];                    $gradelist = make_grades_list($maxpoints);                    if ($type == 0) {                        if ($viewer == 'teacher' && $mode == 'edit') {                            if ($this->is_graded) {                                $grademenu_selected = $item_roworder_map[$i];                            } else {                                if ($custompoint == 1 && $maxpoints) {                                    $grademenu_selected = $maxpoints;                                } else {                                    $grademenu_selected = $points;                                }                                if (isset($specialmaxpoint[$i])) {                                    $grademenu_selected = $specialmaxpoint[$i];                                }                            }                            $grademenu = html_writer::select($gradelist, $id, $grademenu_selected, null, array("id"=>$id, "onchange"=>"updateGrade(this.id)"));                            $select = $grademenu;                        } else {                            if ($this->is_graded) {                                $select = $item_roworder_map[$i];                            } else {                                $select = 'N/A';                                $percent = 'N/A';                                $starting_total = 'N/A';                            }                        }                    }                                        if (($type == 1 || $type == 2)) {                        if ($viewer == 'student' && $mode == 'edit') {                            if ($this->is_graded) {                                $grademenu_selected = $item_roworder_map[$i];                            } else {                                if ($custompoint == 1 && $maxpoints) {                                    $grademenu_selected = $maxpoints;                                } else {                                    $grademenu_selected = $points;                                }                                if (isset($specialmaxpoint[$i])) {                                    $grademenu_selected = $specialmaxpoint[$i];                                }                            }                            $grademenu = html_writer::select($gradelist, $id, $grademenu_selected, null, array("id"=>$id, "onchange"=>"updateGrade(this.id)"));                                                        $select = $grademenu;                        } else {                            if ($this->is_graded) {                                $select = $item_roworder_map[$i];                            } else {                                $select = 'N/A';                                $percent = 'N/A';                                $starting_total = 'N/A';                            }                        }                    }                    $rubrictable .= '<td><div id="rowgrade'.$i.'">'.$select.'</div></td>';                } else {                    $rubrictable .= '<th>&nbsp;</th>';                }                $rubrictable .= '</tr>';            }                        $rubrictable .= "<tr><td colspan=\"".($this->colspec_count+2)."\" class=\"line\"></td></tr>                             <tr>                                <td colspan=\"".($this->colspec_count)."\" class=\"totals\" align=\"right\">".get_string('totalmark', 'assessment')."</td>                                <td colspan = \"2\" class=\"totals\" align=\"center\">                                   <div id=\"div_grandtotal\" class=\"nowrap\">                                      <span id=\"span_total\">$starting_total</span> / {$this->points} <span class=\"percent\" id=\"span_percent\">($percent&#37;)</span>                                   </div>                                </td>                             </tr>\n";            $colwidth = floor(100/($this->colspec_count+2));        } else {            $maxpoints_arr = array();            for ($j=0; $j<$this->colspec_count+2; $j++) {                $trclass = ($j%2==0) ? 'nocolor' : 'colored';                $rubrictable .= '<tr class='.$trclass.'>';                for ($i=0; $i<$this->rowspec_count+1; $i++) {                    if (!isset($points_arr[$i])) $points_arr[$i] = array();                    if ($j!=$this->colspec_count+1) {                        // Not the first column (level names)                        if ($i != 0) {                            $rowspecid = $this->rowspec_map[$i];                            if ($j !== 0) $custompoint = $this->rowspecs[$rowspecid]['custompoint'];                        }                        // Not the first row (criteria names)                        if ($j != 0) {                            $colspecid = $this->colspec_map[$j];                            if ($i !== 0) {                                $specid = $this->spec_map[$rowspecid][$colspecid];                                if ($custompoint == 1) {                                   $points = $this->specs[$specid]['points'];                                   $maxpoints = $this->specs[$specid]['maxpoints'];                                }                            }                            $levelname = $this->colspecs[$colspecid]['name'];                            $points = $this->colspecs[$colspecid]['points'];                            $maxpoints = $this->colspecs[$colspecid]['maxpoints'];                            // gather points for making dropdown list in case if no maxpoints                            if (sizeof($points_arr[$i])<$this->colspec_count) $points_arr[$i][] = $points;                        }                        // first row defining criteria name                        if ($j == 0) {                            if ($i != 0) {                                $criname = $this->rowspecs[$this->rowspec_map[$i]]['name'];                                $rubrictable .= '<th>'.$criname.'</th>';                            } else {                                $rubrictable .= '<td>&nbsp;</td>';                            }                        } else {                            // first column defining level name and weight                             if ($i == 0) {                                $rubrictable .= '<th>'.$levelname;                                $rubrictable .= '<br />';                                if (is_numeric($maxpoints) && $maxpoints != 0) {                                   $rubrictable .= $points.'-'.$maxpoints.'</th>';                                } else {                                   $rubrictable .= $points.' pts</th>';                                }                            } else {                                $description = $this->specs[$specid]['description'];                                // Disabled level                                if (strtoupper($description) == 'NA') {                                    $description = get_string('notused', 'assessment');                                    if (!isset($specialmaxpoint[$i])) {                                        if ($custompoint == 1) {                                            $specialmaxpoint[$i] = $this->specs[$specid]['points'] - 1;                                        } else {                                            $specialmaxpoint[$i] = $this->colspecs[$colspecid]['points']-1;                                        }                                    }                                }                                $tdclass = '';                                $tdid = 'rb_td_'.$rowspecid.'_';                                if ($custompoint == 1) {                                   $points = $this->specs[$specid]['points'];                                   $maxpoints = $this->specs[$specid]['maxpoints'];                                }                                if (is_numeric($maxpoints) && $maxpoints != 0) {                                   $tdid .= $points.'_'.$maxpoints;                                } else {                                   $tdid .= $points;                                }                                if ($this->is_graded) {                                   if (is_numeric($maxpoints) && $maxpoints != 0) {                                      if ($item_roworder_map[$i] >= $points && $item_roworder_map[$i] <= $maxpoints)                                         $tdclass = 'shadebg';                                   } else {                                      if ($item_roworder_map[$i] == $points)                                         $tdclass = 'shadebg';                                   }                                } else {                                   if ($j == $this->colspec_count)                                      $tdclass = 'shadebg';                                }                                                                $rubrictable .= '<td id="'.$tdid.'" class="'.$tdclass.'">';                                if ($custompoint == 1) {                                   $rubrictable .= '<div class="custom_point_div">';                                   if (is_numeric($maxpoints) && $maxpoints != 0) {                                      $rubrictable .= $points.' - '.$maxpoints.' pts';                                   } else {                                      $rubrictable .= $points.' pts';                                   }                                }                                $rubrictable .= '</div>';                                $rubrictable .= nl2br($description).'</td>';                                                                // Determine the max point for using in bottom row                                if ($j == $this->colspec_count) {                                    $maxpoints_arr[$i] = $maxpoints;                                    if (isset($specialmaxpoint[$i])) $maxpoints_arr[$i] = $specialmaxpoint[$i];                                    if ($maxpoints_arr[$i] == '' || $maxpoints_arr[$i] == 0) {                                      $maxpoints_arr[$i] = $points_arr[$i];                                   }                                }                            }                        }                    } else {                        // The bottom row which contain the drop-down box for selecting grades                        // Skip the first column since it is criteria name                        if($i != 0 ) {                            $id = 'rubricgrade_'.$this->rowspec_map[$i];                            if ($type == 0 || $type == 1 || $type == 2) {                                if (($viewer == 'teacher' || $viewer == 'student') && $mode == 'edit') {                                    if ($this->is_graded) {                                        $grademenu_selected = $item_roworder_map[$i];                                    } else {                                        $default_points = is_array($maxpoints_arr[$i]) ? end($maxpoints_arr[$i]) : $maxpoints_arr[$i];                                        $grademenu_selected = $default_points;                                    }                                    $grademenu = html_writer::select(make_grades_list($maxpoints_arr[$i]), $id, $grademenu_selected, array("0"=>"choosedots"), array("onchange"=>"updateGrade(this.id)"));                                                                        $select = $grademenu;                                } else {                                    if ($this->is_graded) {                                        $select = $item_roworder_map[$i];                                    } else {                                        $select = 'N/A';                                        $percent = 'N/A';                                        $starting_total = 'N/A';                                    }                                }                            }                            $rubrictable .= '<td><div id="rowgrade'.$i.'">'.$select.'</div></td>';                        } else {                            $rubrictable .= '<th>&nbsp;</th>';                        }                    }                }                // The rightest column                if ($j == 0) {                    $rubrictable .= '<td rowspan="'.($this->colspec_count).'" class="line">&nbsp;</td>';                } else if ($j == $this->colspec_count) {                    $rubrictable .= '<td class="totals" align="center">'.get_string('totalmark', 'assessment').'</td>';                } else if ($j == $this->colspec_count+1) {                    $rubrictable .= '<td class="totals" align="center">'.                                    '<div id="div_grandtotal" class="nowrap">'.                                    '<span id="span_total">'.$starting_total.'</span> / '.$this->points.' <span class="percent" id="span_percent">('.$percent.'&#37;)</span>'.                                    '</div></td>';                }                                $rubrictable .= '</tr>';            }            $colwidth = floor(95/($this->rowspec_count+1));        }        $rubrictable .= '</table>';                $style = "<style type=\"text/css\">                  #rubric th {                      width:".$colwidth."%;                  }                  </style>";                if ($mode == 'edit') {           // Print out hidden value to validate there is a rubric information printed           $hiddenfields = '<input type="hidden" name="grade_by_rubric" value="1" />                            <input type="hidden" name="grade" id="form_grade" value="'.$starting_total.'" />                            <input type="hidden" name="is_graded" value="'.($this->is_graded ? 1 : '0' ).'" />';                      // Scripts           $script = "               <script type=\"text/javascript\">               var form_grade = document.getElementById('form_grade');               var span_grade = document.getElementById('span_total');               var span_percent = document.getElementById('span_percent');               var total_pts = $this->points;               var grade = $starting_total_raw;                              // Called everytime a SELECT is changed               function updateGrade(selectid) {                   var new_grade = 0;                   var customrangesuffix = new Array();                   var customrow = new Array();                   var is_custom_point = 0;               ";                      for ($i=1; $i<$this->rowspec_count+1; $i++) {               $rowspecid = $this->rowspec_map[$i];               $selectid = 'rubricgrade_'.$rowspecid;               // JS typecast: multiple by 1               $script .=  "new_grade += document.getElementById('$selectid').options[document.getElementById('$selectid').selectedIndex].value * 1;\n";           }                      $script .= "               span_grade.innerHTML = form_grade.value = new_grade;               span_percent.innerHTML = '('+ (Math.round( new_grade / total_pts * 1000 ) / 10 )+'&#37;)';               ";                      for ($i=1; $i<$this->rowspec_count+1; $i++) {               $rowspecid = $this->rowspec_map[$i];               if ($this->rowspecs[$rowspecid]['custompoint'] == 1) {                  $script .= "customrow.push('$rowspecid');";                  $script .= "customrangesuffix[$rowspecid] = new Array(";                  for ($j=1; $j<$this->colspec_count+1; $j++) {                     $colspecid = $this->colspec_map[$j];                     $specid = $this->spec_map[$rowspecid][$colspecid];                     $points = $this->specs[$specid]['points'];                     $maxpoints = $this->specs[$specid]['maxpoints'];                     if (is_numeric($maxpoints) && $maxpoints != 0) {                        $script .= "'$points"."_"."$maxpoints'";                     } else {                        $script .= "'$points'";                     }                     if ($j != $this->colspec_count) echo ",";                  }                  $script .= ");\n";               }           }                      $script .= "               var selectrownum = selectid.replace('rubricgrade_', '');               var selectrow = document.getElementById(selectid);               var selectscore = selectrow.options[selectrow.selectedIndex].value;               var pointrangesuffix = new Array(";                                 for ($j=1; $j<$this->colspec_count+1; $j++) {               $colspecid = $this->colspec_map[$j];               $points = $this->colspecs[$colspecid]['points'];               $maxpoints = $this->colspecs[$colspecid]['maxpoints'];               if (is_numeric($maxpoints) && $maxpoints != 0) {                  $script .= "'$points"."_"."$maxpoints'";               } else {                  $script .= "'$points'";               }               if ($j != $this->colspec_count) $script .= ",";           }                      $script .= ");               for (i=0; i<customrow.length; i++) {                  if (customrow[i].match(selectrownum) == selectrownum) {                     is_custom_point = 1;                     break;                  }               }                              if (is_custom_point) {                  rangesuffixarr = customrangesuffix[selectrownum];               } else {                  rangesuffixarr = pointrangesuffix;               }                              for (i=0; i<rangesuffixarr.length; i++) {                  if (rangesuffixarr[i].match('_') == '_') {                     var splitrange = rangesuffixarr[i].split('_');                     if (selectscore >= parseInt(splitrange[0]) && selectscore <= parseInt(splitrange[1])) {                        document.getElementById('rb_td_'+selectrownum+'_'+rangesuffixarr[i]).className = 'shadebg';                     } else {                        document.getElementById('rb_td_'+selectrownum+'_'+rangesuffixarr[i]).className = '';                     }                  } else {                     if (selectscore == parseInt(rangesuffixarr[i])) {                        document.getElementById('rb_td_'+selectrownum+'_'+rangesuffixarr[i]).className = 'shadebg';                     } else {                        document.getElementById('rb_td_'+selectrownum+'_'+rangesuffixarr[i]).className = '';                     }                  }               }               }               </script>";         }                if ($return) {            if ($mode == 'edit') {                return $rubrictable.$style.$hiddenfields.$script;            } else {                return $rubrictable.$style;            }        } else {            print $rubrictable;            print $style;            if ($mode == 'edit') {                print $hiddenfields;                print $script;            }        }    }        function computePoints() {        $rowspec_count = $this->rowspec_count;        $colspec_count = $this->colspec_count;        $spec_count = $this->spec_count;        $rowspecs = $this->rowspecs;        $colspecs = $this->colspecs;        $specs = $this->specs;                if(!$spec_count){            $this->get_specs();            if(!$spec_count){               $this->points = 0;               return;            }        }                $maxtotal = 0;                for ($i=1; $i<$rowspec_count+1; $i++) {            if ($rowspecs[$i-1]['custompoint'] == 1) {                for ($j=0; $j<$colspec_count; $j++) {                    $index = ($i-1)*$rowspec_count+$j;                    $description = $specs[$index]['description'];                    if (strtoupper($description) == 'NA') continue;                    if ($specs[$index]['maxpoints'] != 0)                        $point = $specs[$index]['maxpoints'];                    else                        $point = $specs[$index]['points'];                }                $maxtotal += $point;            } else {                for ($j=0; $j<$colspec_count; $j++) {                    $description = $specs[($i-1)*$rowspec_count+$j]['description'];                    if (strtoupper($description) == 'NA') continue;                    if ($colspecs[$j]['maxpoints'] != 0)                        $point = $colspecs[$j]['maxpoints'];                    else                        $point = $colspecs[$j]['points'];                }                $maxtotal += $point;            }        }        $this->points = $maxtotal;    }    function get_spec_data($type=0, $ismarker=0, $userid=0, $marker=0, $submissionid=0){        global $CFG, $USER, $DB;        $markersql = '';        if($this->is_graded){            if ($submissionid) { // sample assessment                $params = array($submissionid, $marker, $type, $this->id, $this->id);                $rubric_array = $DB->get_records_sql($sql = "                    SELECT rs.id as specid,                         rrs.displayorder as roworder, ar.value as score                     FROM {sampleassessment_grade_specs} AS ar INNER JOIN                        {assessment_rubric_specs} AS rs ON rs.id = ar.rubricspecid INNER JOIN                        {assessment_rubric_col_specs} AS rcs ON rcs.id = rs.rubriccolid INNER JOIN                        {assessment_rubric_row_specs} AS rrs ON rrs.id = rs.rubricrowid                     WHERE ar.gradeid = (                        SELECT id                         FROM {sampleassessment_grades}                         WHERE submissionid = ?                         AND marker = ? AND type= ?)                     AND rrs.rubricid = ? AND rcs.rubricid = ?                     ORDER BY rrs.displayorder, rcs.displayorder", $params);            } else {                $params = array();                $workmode = $this->assessment->workmode;                $peergroupmode = 0;                if ($workmode == "group") {                    $peergroupmode = $this->peerassessment->peergroupmode;                }                if ($type == 0) $assessmentid = $this->assessment->teacher;                if ($type == 1) $assessmentid = $this->assessment->self;                if ($type == 2) {                    $assessmentid = $this->assessment->peer;                    if ($ismarker == 2) {                        $params['marker'] = $marker;                    } else if ($ismarker == 1) {                        $params['marker'] = $peergroupmode==2 ? $marker : $USER->id;                    } else {                        $params['marker'] = $peergroupmode==2 ? $marker : $userid;                        $userid = $USER->id;                    }                    $markersql = 'AND marker = :marker';                }                                $params['assessmentid'] = $assessmentid;                $params[$workmode.'id'] = $userid;                $params['type'] = $type;                $params['rrs_rubricid'] = $this->id;                $params['rcs_rubricid'] = $this->id;                                $rubric_array = $DB->get_records_sql($sql = "                    SELECT rs.id as specid, rrs.displayorder as roworder, ar.value as score                     FROM {assessment_grade_specs} AS ar INNER JOIN                         {assessment_rubric_specs} AS rs ON rs.id = ar.rubricspecid INNER JOIN                         {assessment_rubric_col_specs} AS rcs ON rcs.id = rs.rubriccolid INNER JOIN                         {assessment_rubric_row_specs} AS rrs ON rrs.id = rs.rubricrowid                     WHERE ar.gradeid = (                         SELECT id                         FROM {assessment_grades}                        WHERE assessmentid = :assessmentid                         AND ".$workmode."id = :".$workmode."id AND type= :type ".$markersql.")                     AND rrs.rubricid = :rrs_rubricid AND rcs.rubricid = :rcs_rubricid                    ORDER BY rrs.displayorder, rcs.displayorder", $params);                            }        } else {            $params = array($this->id, $this->id);            $rubric_array = $DB->get_records_sql($sql = "                SELECT rs.id as specid, rrs.displayorder as roworder, MAX(rcs.points), -1 as score                   FROM {assessment_rubric_specs} AS rs INNER JOIN                     {assessment_rubric_col_specs} AS rcs ON rcs.id = rs.rubriccolid INNER JOIN                     {assessment_rubric_row_specs} AS rrs ON rrs.id = rs.rubricrowid                 WHERE rrs.rubricid = ? AND rcs.rubricid = ?                  GROUP BY roworder                 ORDER BY rrs.displayorder, rcs.displayorder", $params);        }        return $rubric_array;    }    function process_assessment_grade($feedback, $gradeid, $issample=0){        global $CFG, $DB;                if(empty($feedback->grade_by_rubric)) return;                $this->get_rowspecs();        $this->get_colspecs();        $this->get_specs();                $r_submission = new stdClass();        $r_submission->gradeid = $gradeid;        $r_submission->scores = array();        foreach($feedback as $key => $value){            if(strlen($key)>=12 && substr($key,0,12) == 'rubricgrade_'){                $rowid = substr($key,12);                if ($this->rowspecs[$rowid]['custompoint'] == 1) {                    $params = array('rowid' => $rowid, 'points' => $value, 'maxpoints' => $value);                    $rsid = $DB->get_field_select('assessment_rubric_specs', 'id', "rubricrowid = :rowid AND points <= :points AND maxpoints >= :maxpoints", $params);                } else {                    $rsid = $this->spec_map[$rowid][$this->get_colspec_from_score(intval($value))];                }                $r_submission->scores[intval($rsid)] = intval($value);            }        }                if(empty($r_submission->scores)) error('Invalid submission data.');                $grade_specs_table = $issample ? 'sampleassessment_grade_specs' : 'assessment_grade_specs';                // We don't care if any records exist already - delete those that do (since we're just creating new ids upon inserting)        $DB->delete_records($grade_specs_table, array("gradeid"=>$r_submission->gradeid));                foreach($r_submission->scores as $specid => $score){            $insertobj = new stdClass();            $insertobj->gradeid = $r_submission->gradeid;            $insertobj->rubricspecid = $specid;            $insertobj->value = $score;            if(!($DB->insert_record($grade_specs_table, $insertobj))){                print_error('errorinsertgradespec', 'assessment');            }        }    }    function view_footer(){        echo $OUTPUT->footer();    }    function delete_instance(){        global $DB;        return $DB->delete_records('assessment_rubrics', array('id'=>$this->id)) &&                $DB->delete_records('assessment_rubric_row_specs', array('rubricid'=>$this->id)) &&                $DB->delete_records('assessment_rubric_col_specs', array('rubricid'=>$this->id)) &&                $DB->delete_records_select('assessment_rubric_specs', 'id IN ('.$this->allspecid.')');    }    function get_specs(){        global $CFG, $DB;                if($this->specs_loaded) return;        $params = array($this->id, $this->id);        $specs = $DB->get_records_sql($sql = "            SELECT rs.id, rs.rubricrowid, rs.rubriccolid, rs.description, rs.points, rs.maxpoints             FROM {assessment_rubric_specs} as rs,               {assessment_rubric_row_specs} as rrs,               {assessment_rubric_col_specs} as rcs            WHERE rs.rubricrowid=rrs.id AND rs.rubriccolid=rcs.id             AND rrs.rubricid=? AND rcs.rubricid=?", $params);                $this->specs = null;    // unset        $this->specs_loaded = true;        $this->add_specs($specs);        $this->allspecid = implode(',', array_keys($this->specs));        $this->specs_in_sync = true;    }        function get_rowspecs(){        global $CFG, $DB;                if($this->rowspecs_loaded) return;        $params = array($this->id);        $rowspecs = $DB->get_records_sql($sql = "            SELECT id, rubricid, displayorder, name, custompoint              FROM {assessment_rubric_row_specs}             WHERE rubricid = ?", $params);                $this->rowspecs = null;    // unset        $this->rowspecs_loaded = true;        $this->add_rowspecs($rowspecs);        $this->rowspecs_in_sync = true;    }        function get_colspecs(){        global $CFG, $DB;        if($this->colspecs_loaded) return;        $params = array($this->id);        $colspecs = $DB->get_records_sql($sql = "            SELECT id, rubricid, displayorder, name, points, maxpoints               FROM {assessment_rubric_col_specs}              WHERE rubricid = ?", $params);                $this->colspecs = null;    // unset        $this->colspecs_loaded = true;        $this->add_colspecs($colspecs);        $this->colspecs_in_sync = true;    }    function update_spec_field($id, $field, $value){        $this->specs[$id][$field] = $value;    }    function remove_spec($id){        unset($this->specs[$id]);    }        function _add_spec($spec){        // if we haven't loaded it yet, do it now        if(!$this->specs_loaded) $this->get_specs();        $this->specs_in_sync = false;        $this->array_merge_recursive_unique($this->specs, $spec);        $this->spec_count = count($this->specs);    }    /**    * Add a spec to the rubric. Nothing is saved until $this->commit() is issued    *     * @param int $id only used as reference (new value will be given at ->commit)    * @param int $treeorder order given for spec under parent    * @param string $name     * @param string $notes comments about rubric item    * @param int $parent parent item in rubric (-1 for top level)    */    function add_spec($spec){                if(is_array($spec)) $spec = (object)$spec;        if(is_object($spec)){            $this->_add_spec(array( $spec->id =>                             array( 'rubricrowid' => $spec->rubricrowid,                                   'rubriccolid' => $spec->rubriccolid,                                   'description' => $spec->description,                                   'points' => $spec->points,                                   'maxpoints' => $spec->maxpoints)));            return;        }            // else        print_error('specobjectarray', 'assessment');    }        function add_specs($specs){        if(is_array($specs))            foreach($specs as $id => $spec){                if(is_array($spec) && !isset($spec['id'])) $spec['id'] = $id;                 elseif(is_object($spec) && !isset($spec->id)) $spec->id = $id;                 $this->add_spec( $spec );                                if(is_array($spec))                    $this->spec_map[$spec['rubricrowid']][$spec['rubriccolid']] = $id;                else                    $this->spec_map[$spec->rubricrowid][$spec->rubriccolid] = $id;            }    }        function add_rowspecs($rowspecs){        if(is_array($rowspecs)) {            foreach($rowspecs as $id => $rowspec){                if(is_array($rowspec) && !isset($rowspec['id'])) {                   $rowspec['id'] = $id;                 } elseif(is_object($rowspec) && !isset($rowspec->id)) {                   $rowspec->id = $id;                 }                $this->add_rowspec($rowspec);                                if(is_array($rowspec))                  $this->rowspec_map[$rowspec['displayorder']] = $id;                else if (is_object($rowspec))                  $this->rowspec_map[$rowspec->displayorder] = $id;            }        }    }        function add_colspecs($colspecs){      if(is_array($colspecs)) {         foreach($colspecs as $id => $colspec){            if(is_array($colspec) && !isset($colspec['id']))               $colspec['id'] = $id;             else if(is_object($colspec) && !isset($colspec->id))               $colspec->id = $id;             $this->add_colspec($colspec);                         if(is_array($colspec)) {               $this->colspec_point_map[$colspec['points']] = $id;               $this->colspec_maxpoint_map[$colspec['maxpoints']] = $id;               $this->colspec_map[$colspec['displayorder']] = $id;            } else if (is_object($colspec)) {               $this->colspec_point_map[$colspec->points] = $id;               $this->colspec_maxpoint_map[$colspec->maxpoints] = $id;               $this->colspec_map[$colspec->displayorder] = $id;            }         }      }    }        function get_colspec_from_score($score) {      $colspecs = $this->colspecs;      if(is_array($colspecs)) {         foreach($colspecs as $id => $colspec){            if (isset($colspec['maxpoints']) && $colspec['maxpoints'] > 0) {               if ($score >= $colspec['points'] && $score <= $colspec['maxpoints'])                  return $id;            } else {               if ($score == $colspec['points'])                  return $id;            }         }      }      return false;    }        function _add_rowspec($rowspec){        // if we haven't loaded it yet, do it now        if(!$this->rowspecs_loaded) $this->get_rowspecs();        $this->rowspecs_in_sync = false;        $this->array_merge_recursive_unique($this->rowspecs, $rowspec);        $this->rowspec_count = count($this->rowspecs);    }        function add_rowspec($rowspec) {        if(is_array($rowspec)) $rowspec = (object)$rowspec;                if(is_object($rowspec)){            $rowspec->displayorder = $rowspec->displayorder==null ? 0 : $rowspec->displayorder;            $this->_add_rowspec( array( $rowspec->id =>                                 array( 'rubricid' => $rowspec->rubricid,                                        'displayorder' => $rowspec->displayorder,                                        'name' => $rowspec->name,                                        'custompoint' => $rowspec->custompoint)));            return;        }    }        function _add_colspec($colspec){        // if we haven't loaded it yet, do it now        if(!$this->colspecs_loaded) $this->get_colspecs();        $this->colspecs_in_sync = false;        $this->array_merge_recursive_unique($this->colspecs, $colspec);        $this->colspec_count = count($this->colspecs);    }        function add_colspec($colspec) {        if(is_array($colspec)) $colspec = (object)$colspec;                if(is_object($colspec)){            $colspec->displayorder = $colspec->displayorder==null ? 0 : $colspec->displayorder;            $this->_add_colspec( array( $colspec->id =>                        array( 'rubricid'  => $colspec->rubricid,                               'displayorder'     => $colspec->displayorder,                               'name'      => $colspec->name,                               'points'    => $colspec->points,                               'maxpoints' => $colspec->maxpoints)));            return;        }    }    /**     * Saves changes to DB     */    function commit() {        global $CFG, $DB;                // no changes neccessary        if ($this->rowspecs_in_sync && $this->colspecs_in_sync && $this->specs_in_sync && $this->in_sync()) return 1;        $error = 0;                $data = new stdClass;        if (!$this->in_sync()){ // rubric values             $data->name = $this->name;            $data->description = $this->description;            $data->creatorid = $this->creatorid;            $data->courseid = $this->courseid;            $data->points = $this->points;            $data->rowcoldefine = $this->rowcoldefine;            $data->timemodified = time();                        if($this->is_new){                if (($this->id = $DB->insert_record('assessment_rubrics', $data)) == 0){                    $this->id = $DB->insert_record('assessment_rubrics', $data); // do it again                    $DB->delete_records('assessment_rubrics', array('id'=>0)) || $error++;      // and cleanup                }                !empty($this->id) || $error++;            } else {                $data->id = $this->id;                $DB->update_record('assessment_rubrics', $data) || $error++;            }        }                if (!$this->rowspecs_in_sync) {            // Clear all records            if(!$this->is_new) $DB->delete_records('assessment_rubric_row_specs', array('rubricid'=>$this->id));                        // Get largest existing 'id' + 1            $base_id = intval($DB->get_field_select('assessment_rubric_row_specs', 'MAX(id)', '')) + 1;                        // & Re-insert them            foreach($this->rowspecs as $id => $rowspec){                 unset($data); // reset object                 $data = array();                 $data['id'] = $id + $base_id;                 $data['rubricid'] = $this->id;                 $rowspec['displayorder'] = $rowspec['displayorder']===null ? "0" : $rowspec['displayorder'];                 $data['displayorder'] = $rowspec['displayorder'];                 $data['`name`'] = $this->enSlash($rowspec['name']);                 $data['custompoint'] = $rowspec['custompoint'];                 $this->rowspec_map[$data['displayorder']] = $data['id']; // Row Spec ID                                  // insert with custom id                 $DB->insert_record_raw('assessment_rubric_row_specs', $data, true, false, true) || $error++;            }        }                if (!$this->colspecs_in_sync) {            // Clear all records            if(!$this->is_new) $DB->delete_records('assessment_rubric_col_specs', array('rubricid'=>$this->id));                        // Get largest existing 'id' + 1            $base_id = intval($DB->get_field_select('assessment_rubric_col_specs', 'MAX(id)', '')) + 1;                        // & Re-insert them            foreach($this->colspecs as $id => $colspec){                 unset($data); // reset object                 $data = array();                 $data['id'] = $id + $base_id; // Col Spec ID                 $data['rubricid'] = $this->id;                 $data['displayorder'] = $colspec['displayorder']===null ? "0" : $colspec['displayorder'];                 $data['`name`'] = $this->enSlash($colspec['name']);                 $data['points'] = $colspec['points'];                 $data['maxpoints'] = $colspec['maxpoints'];                                  $this->colspec_point_map[$data['points']] = $data['id'];                 $this->colspec_maxpoint_map[$data['maxpoints']] = $data['id'];                 $this->colspec_map[$data['displayorder']] = $data['id'];                                  // insert with custom id                 $DB->insert_record_raw('assessment_rubric_col_specs', $data, true, false, true) || $error++;            }        }                if (!$this->specs_in_sync) {            // Clear all records            if(!$this->is_new && $this->allspecid != '') {                 $DB->delete_records_select('assessment_rubric_specs', 'id IN ('.$this->allspecid.')');            }                        // Get largest existing 'id' + 1            $base_id = intval($DB->get_field_select('assessment_rubric_specs', 'MAX(id)', '')) + 1;            // & Re-insert them            foreach($this->specs as $id => $spec){                unset($data); // reset object                $data = array();                $data['id'] = $id + $base_id; // Spec ID                $data['rubricrowid'] = $spec['rubricrowid'];                $data['rubriccolid'] = $spec['rubriccolid'];                $data['description'] = $spec['description'];                $data['points'] = $spec['points'];                $data['maxpoints'] = $spec['maxpoints'];                $this->spec_map[$data['rubricrowid']][$data['rubriccolid']] = $data['id'];                                // insert with custom id                $DB->insert_record_raw('assessment_rubric_specs', $data, true, false, true) || $error++;            }        }                $this->is_new = false;        $this->in_sync = true;        $this->specs_in_sync = true;        $this->rowspecs_in_sync = true;        $this->colspecs_in_sync = true;                return ($error == 0); // checks that all queries evaluated successfully    }        function validate($post){        // User must be valid        if(empty($this->creatorid))            return (object)array('error'=>true,                                  'message'=>get_string('rubric_cannotfinduser', 'assessment'),                                 'fatal'=>true);        // Course object much be valid        if(!is_object($this->course))            return (object)array('error'=>true,                                  'message'=>get_string('rubric_invalidcourse', 'assessment'),                                 'fatal'=>true);        // Name must be something beyond spaces        if(!preg_match('/[^ ]+/', $post['name']))            return (object)array('error'=>true,                                  'message'=>get_string('rubric_notitle', 'assessment'),                                 'fatal'=>false);                for ($j=1; $j<$post['dimension_col']+1; $j++) {            if (!preg_match('/[^ ]+/', $post['colname_'.$j])) {                return (object)array('error'=>true,                                      'message'=>get_string('rubric_colnotitle', 'assessment'),                                     'fatal'=>false);            }                       if (!preg_match('/[^ ]+/', $post['colweight_'.$j]) || !is_numeric($post['colweight_'.$j])) {                return (object)array('error'=>true,                                      'message'=>get_string('rubric_colnopoint', 'assessment'),                                     'fatal'=>false);            }                       if ($post['haverange'] == 0) {                if ($j != 1) {                    if ($post['colweight_'.$j] < $post['colweight_'.($j-1)]) {                        return (object)array('error'=>true,                                              'message'=>get_string('rubric_colpointorder', 'assessment'),                                             'fatal'=>false);                    }                }            } else {                if (!preg_match('/[^ ]+/', $post['colmaxweight_'.$j]) || !is_numeric($post['colmaxweight_'.$j])) {                    return (object)array('error'=>true,                                          'message'=>get_string('rubric_colnopoint', 'assessment'),                                         'fatal'=>false);                }                if ($post['colweight_'.$j] != 0 && $post['colweight_'.$j] >= $post['colmaxweight_'.$j]) {                    return (object)array('error'=>true,                                          'message'=>get_string('rubric_colpointupperrange', 'assessment'),                                         'fatal'=>false);                }                if ($j != 1) {                    if ($post['colweight_'.$j] < $post['colmaxweight_'.($j-1)]) {                        return (object)array('error'=>true,                                              'message'=>get_string('rubric_colpointlowerrange', 'assessment'),                                             'fatal'=>false);                    }                }            }        }                for ($i=1; $i<$post['dimension_row']+1; $i++) {            if (!preg_match('/[^ ]+/', $post['rowname_'.$i])) {                return (object)array('error'=>true,                                      'message'=>get_string('rubric_rownotitle', 'assessment'),                                     'fatal'=>false);            }            for ($j=1; $j<$post['dimension_col']+1; $j++) {                // do nothing            }        }                     // Is the name unique?        if($this->is_new && !$this->check_name_availability($this->name))            return (object)array('error'=>true,                                  'message'=>get_string('duplicaterubricname', 'kbforum', $this->deSlash($this->name)),                                 'fatal'=>false);        // no error        return (object)array('error'=>false);    }    function check_name_availability($name) {        global $DB;        return $DB->count_records('assessment_rubrics', array('name'=>$name, 'courseid'=>$this->course->id)) > 0 ? false : true;    }    function array_merge_recursive_unique(&$current, $updated) {        // STRATEGY        // http://us.php.net/manual/en/function.array-merge-recursive.php        /*              Merge current and updated, overwriting 1st array values with 2nd array        values where they overlap. Use current as the base array and then add        in values from updated as they exist.        Walk through each value in updated and see if a value corresponds        in current. If it does, overwrite with second array value. If it's an        array, recursively execute this function and return the value. If it's        a scalar, overwrite the value from current with the value from updated.        If a value exists in updated that is not found in current, add it to current.        */        // LOOP THROUGH $updated        foreach($updated AS $k => $v) {            // CHECK IF VALUE EXISTS IN $current            if(!empty($current[$k])) {                // IF VALUE EXISTS CHECK IF IT'S AN ARRAY OR A STRING                if(!is_array($updated[$k])) {                    // OVERWRITE IF IT'S A SCALAR/OBJECT                    $current[$k]=$updated[$k];                } else {                    // RECURSE IF IT'S AN ARRAY                    $current[$k] = $this->array_merge_recursive_unique($current[$k], $updated[$k]);                }               } else {                // IF VALUE DOESN'T EXIST IN $current USE $updated VALUE                $current[$k]=$v;            }           }           unset($k, $v);        return $current;    }    function enSlash(&$string) {        return addslashes($string);    }    function deSlash($string) {        $string = str_replace("\\'",  "'", $string);        $string = str_replace("\\\"", '"', $string);        $string = str_replace("\\\\", "\\", $string);        return $string;    }    function formerr($fatal, $message, $link_if_fatal){        $button = $fatal ? "<br /><br /><input type=\"button\"                onclick=\"javascript:document.location.href='$link_if_fatal'\"                 value=\"Continue\" />" : '';        echo "<table width=\"100%\"><tr><td width=\"100%\" align=\"center\">                <p style=\"color:red; font-weight:bold\">                   $message $button                </p>              </td></tr></table>";        if($fatal) exit;    }    function get_assoc_assessments(){        global $CFG, $DB;        if(empty($this->id)) return null;        $params = array($this->id);        $rubrics = $DB->get_records_sql($sql = "            SELECT A.name, A.id, CM.id as cm             FROM {assessment} A, {course_modules} CM, {modules} M            WHERE A.rubricid = ?                AND CM.instance = A.id                AND CM.module = M.id                AND M.name = 'assessment'            ", $params);                if(!is_array($rubrics)) return null;        else                    return $rubrics;    }        function get_linked_assessments(){        global $CFG, $DB;        if(empty($this->id)) return null;        $params = array($this->id);        $assessments = $DB->get_records_sql($sql = "            SELECT A.id              FROM {assessment} A, {course_modules} CM, {modules} M            WHERE A.rubricid = ?               AND CM.instance = A.id               AND CM.module = M.id               AND M.name = 'assessment'            ", $params);                if(!$assessments) return null;        else          return $assessments;    }        function get_linked_sampleassessments(){        global $CFG, $DB;        if(empty($this->id)) return null;        $params = array($this->id);        $sampleassessments = $DB->get_records_sql($sql = "            SELECT sa.id             FROM {sampleassessment} sa, {course_modules} CM, {modules} M            WHERE sa.rubricid = ?                AND CM.instance = sa.id                AND CM.module = M.id                AND M.name = 'sampleassessment'            ", $params);                if(!$sampleassessments) return null;        else          return $sampleassessments;    }        function is_used_to_grade() {        global $CFG, $DB;        $return = false;        $assessments = $this->get_linked_assessments();        if ($assessments) {            foreach ($assessments as $assessment) {                $assessment->teacher = $DB->get_field('assessment_types', 'id', array('assessmentid'=>$assessment->id, 'type'=>0));                $assessment->self = $DB->get_field('assessment_types', 'id', array('assessmentid'=>$assessment->id, 'type'=>1));                $assessment->peer = $DB->get_field('assessment_types', 'id', array('assessmentid'=>$assessment->id, 'type'=>2));                $params = array($assessment->teacher, $assessment->self, $assessment->peer);                $sql = 'SELECT id FROM {assessment_grades}                         WHERE (assessmentid = ? AND type = 0) OR                              (assessmentid = ? AND type = 1) OR                              (assessmentid = ? AND type = 2)';                $havegrades = $DB->record_exists_sql($sql, $params);                if ($havegrades) return true;            }            $return = false;        } else {            $return = false;        }                if ($DB->record_exists('modules', array('name'=>'sampleassessment'))) {            $sampleassessments = $this->get_linked_sampleassessments();            if ($sampleassessments) {                foreach ($sampleassessments as $sampleassessment) {                    $params = array($sampleassessment->id);                    $sql = 'SELECT sg.id FROM {sampleassessment_grades} sg, {sampleassessment_submissions} ss                            WHERE sg.submissionid = ss.id AND ss.assessmentid = ?';                    $havegrades = $DB->record_exists_sql($sql, $params);                    if ($havegrades) return true;                }                $return = false;            } else {                $return = false;            }        }                return $return;    }    function update_form_rubric($mode){        // update listing and close()        echo "<script type=\"text/javascript\">              opener.addRubric('{$this->name} ({$this->points} pts)',{$this->id});              window.close();              </script>";    }} //// END rubric CLASS/** * This is a modified verion of make_grades_menu from moodlelib * that allows negative grades.  * @param int $scale maximum points (or if negative, minimum points) */function make_grades_list($scale){   $grades = array();      if (is_array($scale)) {      sort($scale);      $max = end($scale);      if (reset($scale) != 0) $grades[0] = "0 / $max";      foreach ($scale as $grade) {         $grades[$grade] = "$grade / $max";      }   } else {      for($i=0; $i<=$scale; $i++){         $grades[$i] = "$i / $scale";      }   }   return $grades;}function get_rubrics_as_options($courseid){    global $CFG, $DB;        $params = array($courseid);    $rubrics = $DB->get_records_sql($sql = "        SELECT id, name, points        FROM {assessment_rubrics}        WHERE courseid = ?        ORDER BY name        ", $params);        $params = array($courseid);    $external_rubrics = $DB->get_records_sql($sql = "        SELECT r.id, r.name, r.points, r.courseid, c.shortname        FROM {assessment_rubrics} r, {course} c        WHERE c.id = r.courseid AND courseid != ?        ORDER BY c.shortname        ", $params);        $options = array();    if (is_array($rubrics)) {        foreach($rubrics as $id => $rubric)            $options[$id] = "{$rubric->name} ({$rubric->points} pts)";    }        if (is_array($external_rubrics)) {        foreach($external_rubrics as $id => $rubric)            $options[$id] = "{$rubric->shortname} :: {$rubric->name} ({$rubric->points} pts)";    }    return $options;}function red($value){    if($value < 0)        return "<span class=\"red\">$value</span>";    else        return $value;}function get_list_count_in_course(){    global $DB;    return $DB->count_records('assessment_rubrics', array('courseid'=>$this->course->id)); }function rubric_get_list($courseid){    // Returns values for the mod_form.php page (DO NOT CHANGE VALUES)    global $CFG, $DB;    $params = array($courseid);    $rubrics = $DB->get_records_sql($sql = "        SELECT id as value, name as text, points, 1 as _RUBRIC        FROM {assessment_rubrics}         WHERE courseid = ?        ", $params);        if(!is_array($rubrics)) return null;    else                    return $rubrics;}function rubric_get_list_in_course($courseid=0){    // Returns all rubrics    global $CFG, $DB;	$sql = "SELECT r.id, r.name, r.points, r.timemodified, r.courseid, r.creatorid as userid, u.firstname as first, u.lastname as last,            (SELECT COUNT(*) FROM {assessment} WHERE rubricid = r.id) count            FROM {assessment_rubrics} r, {user} u";		if ($courseid) {		$where = " WHERE r.courseid = ? AND u.id = r.creatorid";        $params = array($courseid);	} else {		$where = " WHERE u.id = r.creatorid";        $params = array();	}	    $rubrics = $DB->get_records_sql($sql.$where, $params);        if(!is_array($rubrics)) return null;    else                    return $rubrics;}